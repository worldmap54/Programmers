---
description: 프로젝트 구조 및 파일 조직화 규칙
globs: ["**/*.py", "**/*.txt", "**/*.md"]
alwaysApply: true
---
# 프로젝트 구조 규칙

## 1. 파일 생성 프로세스
### 1.1 입력 정보
- 문제 이름: 문제의 제목 (예: "동영상 재생기")
- 문제 설명: 문제의 요구사항 및 설명

### 1.2 생성할 파일 목록
```
문제이름/
├── solution.py          # 메인 솔루션 파일
├── 문제_설명.txt        # 문제 요구사항 및 설명
├── 문제_분석.txt        # 알고리즘 분석 및 접근 방법
├── 구현_알고리즘.txt     # 상세 구현 방법
└── README.md           # 프로젝트 설명
```

### 1.3 solution.py 기본 구조
```python
def solution(param1, param2, ...):
    """
    문제 해결을 위한 메인 함수
    
    Args:
        param1: 첫 번째 매개변수 설명
        param2: 두 번째 매개변수 설명
        ...
        
    Returns:
        결과값 설명
    """
    answer = ''  # 문제 설명에 맞는 초기값 설정
    return answer

def test_solution():
    """
    solution 함수의 테스트를 수행하는 함수
    """
    # 테스트 케이스 1
    assert solution(...) == ...
    
    print("모든 테스트 케이스 통과!")

if __name__ == "__main__":
    test_solution()
```

## 2. 파일 작성 규칙

### 2.1 solution.py
- 코드 수정이 아니고 파일 생성이라면 `solution()` 함수와 `test_solution()` 함수의 기본적인 뼈대만 구성
- 내부 알고리즘 구현을 엄격하게 금함
- 메인 솔루션 함수는 `solution()`으로 명명
- 함수는 반드시 결과값을 반환해야 함
- 반환값은 문제 설명에 명시된 형식과 타입을 정확히 따라야 함
- 반환값 변수명은 `answer`로 통일
- 메인 실행 코드는 `if __name__ == "__main__":` 블록에 작성
- 테스트 케이스 검증 코드 포함
- Type hints와 docstring 필수

### 2.2 문제_설명.txt
- 문제 제목
- 문제 설명
- 입력 형식
- 출력 형식
- 제약 조건
- 예시 입력/출력
- 테스트 케이스

### 2.3 문제_분석.txt
- 문제 접근 방법
- 사용할 알고리즘 설명
- 시간/공간 복잡도 분석
- 최적화 포인트
- 고려사항

### 2.4 구현_알고리즘.txt
- 알고리즘 구현 단계
- 핵심 로직 설명
- 예외 처리 방법
- 최적화 기법

### 2.5 README.md
- 문제 설명 요약
- 실행 방법
- 테스트 방법
- 성능 분석
- 개선 사항

## 3. 파일 생성 순서
1. 디렉토리 생성
2. solution.py 생성 (기본 구조만)
3. 문제_설명.txt 생성
4. 문제_분석.txt 생성
5. 구현_알고리즘.txt 생성
6. README.md 생성

## 4. 주의사항
- 파일 생성 시에는 solution.py의 내부 로직을 구현하지 않음
- 모든 파일은 UTF-8 인코딩으로 저장
- 파일명은 문제 이름을 기준으로 생성
- 각 파일의 내용은 해당 섹션의 규칙을 준수 